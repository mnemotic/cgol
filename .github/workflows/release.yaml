# @CREDIT: <https://github.com/bevyengine/bevy_github_ci_template/blob/main/.github/workflows/release.yaml>

name: Release

on:
  push:
    tags:
      - 'v*'

env:
  binary: game-of-life
  add_binaries_to_github_release: true
  itch_target: mnemotic/game-of-life


jobs:

  # Build for WASM.
  release-wasm:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: tj-actions/branch-names@v7
        id: get-tag-name
        with:
          strip_tag_prefix: v
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-bindgen-cli
        run: |
          cargo install --locked wasm-bindgen-cli
      - name: Install Trunk
        run: |
          cargo install --locked trunk
      - name: Build
        run: |
          trunk build --release

      # See <https://github.com/thedodd/trunk/pull/361#issuecomment-1308487648>.
      - name: Prepare
        working-directory: ./dist
        run: |
          sed --in-place -e "s@'/@'./@g" -e 's@"/@"./@g' index.html

      - name: Package
        working-directory: ./dist
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}.zip
          name: wasm
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}_${{ steps.get-tag-name.outputs.tag }}_wasm.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Linux.
  release-linux:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: tj-actions/branch-names@v7
        id: get-tag-name
        with:
          strip_tag_prefix: v
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends \
            pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r assets linux/

      - name: Package
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}.zip
          name: linux
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}_${{ steps.get-tag-name.outputs.tag }}_linux-amd64.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Windows.
  release-windows:
    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      - uses: tj-actions/branch-names@v7
        id: get-tag-name
        with:
          strip_tag_prefix: v
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          cp -r assets windows/

      - name: Package
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.binary }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}.zip
          name: windows
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}_${{ steps.get-tag-name.outputs.tag }}_windows-amd64.zip
          tag: ${{ github.ref }}
          overwrite: true

  check-if-upload-to-itch-is-configured:
    runs-on: ubuntu-latest
    outputs:
      should-upload: ${{ steps.check-env.outputs.has-itch-target }}
    steps:
      - id: check-env
        run: |
          if [[ -z "$itch_target" ]]; then
            echo "has-itch-target=no" >> $GITHUB_OUTPUT
          else
            echo "has-itch-target=yes" >> $GITHUB_OUTPUT
          fi

  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - check-if-upload-to-itch-is-configured
      - release-wasm
      - release-linux
      - release-windows
    if: ${{ needs.check-if-upload-to-itch-is-configured.outputs.should-upload == 'yes' }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./builds

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - uses: tj-actions/branch-names@v7
        id: get-tag-name
        with:
          strip_tag_prefix: v
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ steps.get-tag-name.outputs.tag }}" \
                builds/$channel/* \
                ${{ env.itch_target }}:$channel
          done
